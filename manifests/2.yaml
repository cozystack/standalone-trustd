apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    kamaji.clastix.io/component: deployment
    kamaji.clastix.io/name: kubernetes-foo
    kamaji.clastix.io/project: kamaji
  name: kubernetes-foo
  namespace: tenant-kvaps
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      kamaji.clastix.io/name: kubernetes-foo
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        kamaji.clastix.io/component: deployment
        kamaji.clastix.io/name: kubernetes-foo
        policy.cozystack.io/allow-to-etcd: "true"
    spec:
      containers:
      - args:
        - --advertise-address=10.96.49.71
        - --allow-privileged=true
        - --authorization-mode=Node,RBAC
        - --client-ca-file=/etc/kubernetes/pki/ca.crt
        - --egress-selector-config-file=/etc/kubernetes/konnectivity/configurations/egress-selector-configuration.yaml
        - --enable-admission-plugins=CertificateApproval,CertificateSigning,CertificateSubjectRestriction,DefaultIngressClass,DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,MutatingAdmissionWebhook,NamespaceLifecycle,PersistentVolumeClaimResize,Priority,ResourceQuota,RuntimeClass,ServiceAccount,StorageObjectInUseProtection,TaintNodesByCondition,ValidatingAdmissionWebhook
        - --enable-bootstrap-token-auth=true
        - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        - --etcd-certfile=/etc/kubernetes/pki/etcd/server.crt
        - --etcd-compaction-interval=0
        - --etcd-keyfile=/etc/kubernetes/pki/etcd/server.key
        - --etcd-prefix=/tenant_kvaps_kubernetes_foo
        - --etcd-servers=https://etcd.tenant-root.svc:2379
        - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
        - --kubelet-preferred-address-types=InternalIP,ExternalIP
        - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
        - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        - --requestheader-allowed-names=front-proxy-client
        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        - --requestheader-extra-headers-prefix=X-Remote-Extra-
        - --requestheader-group-headers=X-Remote-Group
        - --requestheader-username-headers=X-Remote-User
        - --secure-port=6443
        - --service-account-issuer=https://kubernetes.default.svc.cluster.local
        - --service-account-key-file=/etc/kubernetes/pki/sa.pub
        - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
        - --service-cluster-ip-range=10.95.0.0/16
        - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
        - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        command:
        - kube-apiserver
        image: registry.k8s.io/kube-apiserver:v1.33.0
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: 6443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: kube-apiserver
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 6443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        startupProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: 6443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes/pki
          name: etc-kubernetes-pki
          readOnly: true
        - mountPath: /etc/ca-certificates
          name: etc-ca-certificates
          readOnly: true
        - mountPath: /usr/share/ca-certificates
          name: usr-share-ca-certificates
          readOnly: true
        - mountPath: /usr/local/share/ca-certificates
          name: usr-local-share-ca-certificates
          readOnly: true
        - mountPath: /run/konnectivity
          name: konnectivity-uds
        - mountPath: /etc/kubernetes/konnectivity/configurations
          name: egress-selector-configuration
      - args:
        - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
        - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
        - --bind-address=0.0.0.0
        - --kubeconfig=/etc/kubernetes/scheduler.conf
        - --leader-elect=true
        command:
        - kube-scheduler
        image: registry.k8s.io/kube-scheduler:v1.33.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: kube-scheduler
        resources: {}
        startupProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes
          name: scheduler-kubeconfig
          readOnly: true
      - args:
        - --allocate-node-cidrs=true
        - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
        - --bind-address=0.0.0.0
        - --client-ca-file=/etc/kubernetes/pki/ca.crt
        - --cluster-cidr=10.243.0.0/16
        - --cluster-name=kubernetes-foo
        - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
        - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        - --controllers=*,bootstrapsigner,tokencleaner
        - --kubeconfig=/etc/kubernetes/controller-manager.conf
        - --leader-elect=true
        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        - --root-ca-file=/etc/kubernetes/pki/ca.crt
        - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
        - --service-cluster-ip-range=10.95.0.0/16
        - --use-service-account-credentials=true
        command:
        - kube-controller-manager
        image: registry.k8s.io/kube-controller-manager:v1.33.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: kube-controller-manager
        resources: {}
        startupProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes
          name: controller-manager-kubeconfig
          readOnly: true
        - mountPath: /etc/kubernetes/pki
          name: etc-kubernetes-pki
          readOnly: true
        - mountPath: /etc/ca-certificates
          name: etc-ca-certificates
          readOnly: true
        - mountPath: /usr/share/ca-certificates
          name: usr-share-ca-certificates
          readOnly: true
        - mountPath: /usr/local/share/ca-certificates
          name: usr-local-share-ca-certificates
          readOnly: true
      - args:
        - --admin-port=8133
        - --agent-namespace=kube-system
        - --agent-port=8132
        - --agent-service-account=konnectivity-agent
        - --authentication-audience=system:konnectivity-server
        - --cluster-cert=/etc/kubernetes/pki/apiserver.crt
        - --cluster-key=/etc/kubernetes/pki/apiserver.key
        - --health-port=8134
        - --kubeconfig=/etc/kubernetes/konnectivity-server.conf
        - --mode=grpc
        - --server-count=1
        - --server-port=0
        - --uds-name=/run/konnectivity/konnectivity-server.socket
        command:
        - /proxy-server
        image: registry.k8s.io/kas-network-proxy/proxy-server:v0.28.6
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8134
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 60
        name: konnectivity-server
        ports:
        - containerPort: 8132
          name: agentport
          protocol: TCP
        - containerPort: 8133
          name: adminport
          protocol: TCP
        - containerPort: 8134
          name: healthport
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes/pki
          name: etc-kubernetes-pki
          readOnly: true
        - mountPath: /etc/kubernetes/konnectivity-server.conf
          name: konnectivity-server-kubeconfig
          readOnly: true
          subPath: konnectivity-server.conf
        - mountPath: /run/konnectivity
          name: konnectivity-uds
      - args:
        - --ca-cert=/etc/kubernetes/pki/ca.crt
        - --ca-key=/etc/kubernetes/pki/ca.key
        - --server-cert=/etc/kubernetes/pki/apiserver.crt
        - --server-key=/etc/kubernetes/pki/apiserver.key
        - --accepted-cas=/etc/kubernetes/pki/ca.crt
        - --auth-token=$(TRUSTD_AUTH_TOKEN)
        - --port=50001
        command:
        - /trustd
        image: ghcr.io/kvaps/test:trustd-6
        imagePullPolicy: Always
        name: trustd
        env:
        - name: TRUSTD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: kubernetes-foo-trustd
              key: auth-token
        volumeMounts:
        - mountPath: /etc/kubernetes/pki
          name: etc-kubernetes-pki
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - name: etc-kubernetes-pki
        projected:
          defaultMode: 420
          sources:
          - secret:
              items:
              - key: apiserver.crt
                path: apiserver.crt
              - key: apiserver.key
                path: apiserver.key
              name: kubernetes-foo-api-server-certificate
          - secret:
              items:
              - key: ca.crt
                path: ca.crt
              - key: ca.key
                path: ca.key
              name: kubernetes-foo-ca
          - secret:
              items:
              - key: apiserver-kubelet-client.crt
                path: apiserver-kubelet-client.crt
              - key: apiserver-kubelet-client.key
                path: apiserver-kubelet-client.key
              name: kubernetes-foo-api-server-kubelet-client-certificate
          - secret:
              items:
              - key: front-proxy-ca.crt
                path: front-proxy-ca.crt
              - key: front-proxy-ca.key
                path: front-proxy-ca.key
              name: kubernetes-foo-front-proxy-ca-certificate
          - secret:
              items:
              - key: front-proxy-client.crt
                path: front-proxy-client.crt
              - key: front-proxy-client.key
                path: front-proxy-client.key
              name: kubernetes-foo-front-proxy-client-certificate
          - secret:
              items:
              - key: sa.pub
                path: sa.pub
              - key: sa.key
                path: sa.key
              name: kubernetes-foo-sa-certificate
          - secret:
              items:
              - key: ca.crt
                path: etcd/ca.crt
              - key: server.crt
                path: etcd/server.crt
              - key: server.key
                path: etcd/server.key
              name: kubernetes-foo-datastore-certificate
      - name: etc-ca-certificates
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-ca
      - name: usr-share-ca-certificates
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-ca
      - name: usr-local-share-ca-certificates
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-ca
      - name: scheduler-kubeconfig
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-scheduler-kubeconfig
      - name: controller-manager-kubeconfig
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-controller-manager-kubeconfig
      - emptyDir:
          medium: Memory
        name: konnectivity-uds
      - configMap:
          defaultMode: 420
          name: kubernetes-foo-konnectivity-egress-selector-configuration
        name: egress-selector-configuration
      - name: konnectivity-server-kubeconfig
        secret:
          defaultMode: 420
          secretName: kubernetes-foo-konnectivity-kubeconfig

---
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-foo-trustd
  namespace: tenant-kvaps
type: Opaque
stringData:
  auth-token: 2k882v.z2vi7kefznukil1o
